.TH "Vertigo" "1" 
.SH "NAME" 
\fBvertigo\fR \(em a command line tool to test rave algorithms in various environments 
.SH "SYNOPSIS" 
.PP 
\fBvertigo\fR [\fB-h\fP  | \fB-l\fP  | \fB-v\fIVERBOSITY\fR\fP  | \fB-s\fISOURCE\fR\fP  | \fB-m\fIMETHOD\fR\fP  | \fB-S\fISKIN\fR\fP  | \fB-n\fINUM\fR\fP  | \fB-o\fIOBSERVER\fR\fP  | \fB-c\fICONFIGURABLE\fR\fP  | \fB-C\fP ]  
.SH "DESCRIPTION" 
.PP 
\fBvertigo\fR is conceived as a command line tool to test rave algorithms with both artifical  
("vertex gun") and realistic data. It can currently  read in data generated by a 
data harvester, as well as LCIO data. 
On the analysis side, \fBvertigo\fR has a few Observer classes that make it easy 
to analyse the performance of the vertex reconstruction algorithms. 
This man page is for $Rev: 191 $.  
 
.SH "OPTIONS" 
.PP 
\fBvertigo\fR accepts the following options: 
 
.IP "\fB-h,\-\-help\fP" 10 
Shows the help page 
.IP "\fB-l,\-\-list\fP" 10 
List all methods and observers (then quit) 
.IP "\fB-v,\-\-verbosity\fP" 10 
Set verbosity [default 10]. "\-v0" means complete silence. 
"\-v1" plots one dot per event, and nothing else. 
.IP "\fB-s,\-\-source\fP" 10 
Specify data source [default=gun:simple] 
.IP "\fB-S,\-\-skin\fP" 10 
Specify skin [default=CMS]  
.IP "\fB-m,\-\-method\fP" 10 
Specify reconstruction method [default=default]  
.IP "\fB-n,\-\-events\fP" 10 
Specify the event numbers to be considered.  
.IP "\fB-o,\-\-observer\fP" 10 
Run only specified observers. (comma-separated list, no white spaces)  
.IP "\fB-c,\-\-configurable\fP" 10 
Set configurables. \-cname=value,name2=value2,...  
.IP "\fB-c,\-\-list-configurables\fP" 10 
List all configurables that have been in use at the end of the run. 
.SH "DATA SOURCES" 
.PP 
Depending on the configuration at compile time, 
the user can use certain sub-set of the following data sources: 
 
.IP "gun: (\-sgun:\fIgunname\fR)" 10 
Data is generated on-the-fly by a named VertexGun. Currently the following named VertexGuns exist: simple, dirty_primary, bjet. This data source is always available. 
 
.IP "file: (\-sfile:\fIfilename\fR)" 10 
Read in from a DataHarvester file. (Obviously, this only exists if support for DataHarvesting has been compiled in). Multiple files can be given with a ";" as a separator. 
.IP "lcio: (\-slcio:\fIfilename:collectionname\fR)" 10 
Read in from an LCIO file. (Obviously, this only exists if support for LCIO has been compiled in.) 
.SH "OBSERVER" 
.PP 
Depending on the configuration at compile time, 
a certain sub-set of the following Observer is available to the user: 
 
.IP "\fBEventWriter: (\-o EventWriter[\-filename])\fP" 10 
Simple Observer that dumps events into a file. 
Depends on DataHarvesting. 
 
.IP "\fBEventHistogrammer: (\-o EventHistogrammer[\-filename])\fP" 10 
Writes down some stats about the events. 
Depends on DataHarvesting. 
 
.IP "\fBEventPrinter:\fP" 10 
Dumps a fancy event description to stdout. 
 
.IP "\fBFindingObserver: (\-o FindingObserver[\-filename])\fP" 10 
Special observer for the finding sensitivity paper. 
Depends on DataHarvesting. 
 
.IP "\fBFitterTournament:\fP" 10 
Tournament observer that compares different fitters. 
Depends on DataHarvesting. 
 
.IP "\fBTrackParameterHisto: (\-o TrackParameterHisto[\-filename])\fP" 10 
Histograms track parameter. 
Depends on DataHarvesting. 
 
.IP "\fBVertexHistogrammer: (\-o VertexHistogrammer[\-filename])\fP" 10 
Analyses the specified fitter. 
Depends on DataHarvesting. 
 
.IP "\fBVisualiser:\fP" 10 
Observer that feeds event to RaveVis. Depends on the Vis package. 
 
.PP 
\fBA snapshot, created by the Visualiser, one out of a few Observers in vertigo (not visible in the man page).\fR 
.SH "SKINS" 
.PP 
Vertigo introduces the skin concept on source code basis for easy prototyping of glue code for various analysis frameworks. 
Skins usually contain parameter transformation routines and implement specific propagators and magnetic fields. They 
hold all detector specific information Rave needs and therefore should be reusable in "general purpose" analysis frameworks 
linking against Rave. 
 
.PP 
Currently following skins are maintained: 
.IP "CMSSkin" 10 
Implements an interface prototype between the CMS framework CMSSW and the Rave library 
 
.IP "LDCSkin" 10 
Contains all necessary code for using Rave within the MarlinReco framework used with the LDC detector. 
 
.PP 
One can easily specify new skins in a few simple steps: 
.IP "$ cd vertigo" 10 
.IP "\fB$ cp \-R LDCSkin XYZSkin\fR" 10 
.IP "\fB$ cd XYZSkin\fR" 10 
.IP "\fB$ rename LDC XYZ *\fR" 10 
.IP "\fB$ rename LDC XYZ */*/*\fR" 10 
.IP "\fB$ for fl in */*/*.*; do mv $fl $fl.old; sed 's/LDC/SID/g' $fl.old > $fl; rm \-f $fl.old; done\fR" 10 
.IP "Edit the vertigo/SConstruct file and append the name of the new skin to the line 
\fBskindirs = [ 'DummySkin', 'CMSSkin', 'LDCSkin', 'SIDSkin' ]\fP to look like  
\fBskindirs = [ 'DummySkin', 'CMSSkin', 'LDCSkin', 'SIDSkin', 'XYZSkin' ]\fP. 
" 10 
.IP "Edit the vertigo/Vertigo/EventLoop/src/EventLoop.cc file and modify the getFactory method. This should be again just some copy'n'paste an renaming. Don't forget to update the includes on top of that file to include your skins' headers." 10 
.IP "Finally append the new skin directory name to the following line in vertigo/Vertigo/SConscript: 
\fBm.Append( LIBS = [ 'Vertigo', 'CMSSkin', 'DummySkin', 'LDCSkin', 'SIDSkin', 'RaveEnvironment' ] )\fP" 10 
.\" created by instant / docbook-to-man, Tue 23 Jan 2007, 11:55 
